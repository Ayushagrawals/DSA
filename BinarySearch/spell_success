//leetcode 2300. Successful Pairs of Spells and Potions
ðŸ”¹ Problem: For each spell, find how many potions form a successful pair where spell * potion >= success.

ðŸ”¹ Approach: Sort the potions array to leverage the fact that once a potion satisfies the condition, all later potions will too.

ðŸ”¹ Logic: For each spell, use binary search to find the leftmost index where the product is â‰¥ success; the answer is potions.length - index.

ðŸ”¹ Why: Binary search gives O(log M) lookup per spell, optimizing the total time to O(N log M) and ensuring it passes large test cases.

class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        Arrays.sort(potions);
        int ans=0;
        int[] arr=new int[spells.length];
        for(int i=0;i<spells.length;i++)
        {
            arr[i]=check(spells[i],potions,success);
        }
        return arr;
        
    }
    public int check(int spell,int[] potions,long success)
    {
        int start=0;
        int end=potions.length-1;
        int mid=0;
        int minval=Integer.MAX_VALUE;
        while(start<=end)
        {
            mid=(start+end)>>1;
            if((long)potions[mid]*spell>=success)
            {
                minval=potions.length-mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        if(minval==Integer.MAX_VALUE)
        return 0;
        else
        return minval;
    }
}
