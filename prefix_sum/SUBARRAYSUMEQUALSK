//Subarray Sum Equals K
//Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
//A subarray is a contiguous non-empty sequence of elements within an array.

class Solution {
    public int subarraySum(int[] nums, int k) {
        int sum=0;
        int count=0;
        for(int i=0;i<nums.length;i++)
        {
            sum=0;
            for(int j=i;j<nums.length;j++)
            {
                sum+=nums[j];
                if(sum==k)
                {
                    count+=1;
                }
            }
        }
        return count;

        //Variable sliding window
        /*int start=0;
        int sum=0;
        int count=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            while(sum>k)
            {
                sum-=nums[start];
                start+=1;
            }
            if(sum==k)
            {
                count+=1;
            }
            
        }
        return count;
    }
}
//OPTIMIZE WITH HASMAP IDEA

/*Next Step: Use Prefix Sum to avoid recalculating sums
Instead of computing sum(nums[i] to nums[j]) from scratch each time, we use a prefix sum array:
prefixSum[i] = sum(nums[0] to nums[i])
Then
sum(i, j) = prefixSum[j] - prefixSum[i - 1]
prefixSum[j] - prefixSum[i-1] = k
â†’ prefixSum[i-1] = prefixSum[j] - k*/

/*public int subarraySum(int[] nums, int k) {
    Map<Integer, Integer> map = new HashMap<>();
    map.put(0, 1); // Handle sum == k case
    int sum = 0, count = 0;

    for (int num : nums) {
        sum += num;
        if (map.containsKey(sum - k)) {
            count += map.get(sum - k);
        }
        map.put(sum, map.getOrDefault(sum, 0) + 1);
    }
    return count;
}*/

