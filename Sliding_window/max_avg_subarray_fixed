//https://leetcode.com/problems/maximum-average-subarray-i/
//it's a fixed size so we first do for first window get star and the end and start will be i-k i will increase so start will be increased
//and calcuating currsum and compared it iwht give answer
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        double maxsum=0;
        double currsum=0;
        for(int i=0;i<k;i++)
        {
            currsum+=nums[i];
        }
        maxsum=currsum/k;
        
        int start=0;
        for(int i=k;i<nums.length;i++)
        {
            start=i-k;
            currsum=currsum-nums[start]+nums[i];
            double tempmaxsum=currsum/k;
            if(tempmaxsum>maxsum)
            {
                maxsum=tempmaxsum;
            }
        }
        return maxsum;
    }
}
