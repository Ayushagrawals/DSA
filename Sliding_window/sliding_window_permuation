//Q - Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
// In other words, return true if one of s1's permutations is the substring of s2.
//Here we want to check the permutation for that this it the fixed size sliding window problem because of the small string will become the window
// and we can move foarward and check if it's permuation are not by comparing map
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length())
        {
            return false;
        }
        Map<Character,Integer> m1=new HashMap<Character,Integer>();
        Map<Character,Integer> m2=new HashMap<Character,Integer>();
        for(int i=0;i<s1.length();i++)
        {
            m1.put(s1.charAt(i),m1.getOrDefault(s1.charAt(i),0)+1);
            m2.put(s2.charAt(i),m2.getOrDefault(s2.charAt(i),0)+1);
        }
        if(m1.equals(m2))
        {
            return true;
        }
        int end=s1.length();
        int start=0;
        for(int i=end;i<s2.length();i++)
        {
            start=i-end;
            m2.put(s2.charAt(i),m2.getOrDefault((s2.charAt(i)),0)+1);
            if(m2.get(s2.charAt(start))>1)
            {
                m2.put(s2.charAt(start),m2.get(s2.charAt(start))-1);
            }
            else{
                m2.remove(s2.charAt(start));
            }
            if(m1.equals(m2))
            {
                return true;
            }
        }
        return false;
    }
}
