# Sliding Window Pattern: Master Guide

Sliding window is a core pattern in many array and string problems. Here's a complete breakdown with categories, concepts, and when to use fixed-size vs dynamic window.

---

## ‚úÖ Sliding Window Categories

### 1. **Fixed Size Window (Classic Sliding Window)**
- Use when the **window size is given (e.g., k)**.
- Typically use two pointers and maintain a window of size `k`.
- Often pre-calculate the first window separately.

**Examples:**
- Maximum sum of subarray of size `k`
- Maximum in sliding window of size `k` (Deque based)
- Max vowels in a substring of length `k`
- First negative number in every window of size `k`
- Max average of subarray of length `k`
- Anagram detection (`window size = p.length()`)

### 2. **Variable Size Window (Dynamic Sliding Window)**
- Use when window size is **not fixed**, determined by conditions like:
  - Unique characters
  - At most / exactly `k` distinct characters
  - Subarray with sum ‚â• or ‚â§ target

**Examples:**
- Longest substring without repeating characters
- Longest substring with at most `k` distinct characters
- Count substrings with exactly `k` distinct characters
- Number of subarrays with product less than `k`
- Smallest subarray with sum ‚â• `target`
- Minimum window substring


---

## üß† Do I Need to Build the First Window Separately?

| Problem Type                                | Fixed Size? | Build First Window? |
|---------------------------------------------|-------------|----------------------|
| Max/Min/Sum/Average of size `k`             | ‚úÖ          | ‚úÖ Yes               |
| Anagram/Permutation detection               | ‚úÖ          | ‚úÖ Yes               |
| Longest substring without repeating chars   | ‚ùå          | ‚ùå No                |
| At most/Exactly K distinct substrings       | ‚ùå          | ‚ùå No                |
| Subarray with sum/product < or ‚â• target     | ‚ùå          | ‚ùå No                |
| Minimum window substring                    | ‚ùå          | ‚ùå No                |

---

## ü§î Tips to Identify the Type

- **Given k?** ‚Üí Fixed size
- **Asked for max/min in window of k?** ‚Üí Fixed size
- **Asked for longest/shortest substring/subarray with a condition?** ‚Üí Variable size
- **Condition depends on distinct characters, sum, product, or uniqueness?** ‚Üí Variable size

---

## üß∞ Patterns Summary

| Pattern Type         | Uses HashMap? | Uses Deque? | Use Case                              |
|----------------------|---------------|-------------|----------------------------------------|
| Classic Fixed Size   | ‚ùå Sometimes  | ‚ùå/‚úÖ        | Max sum, max vowels, anagram, etc.     |
| Monotonic Deque      | ‚ùå            | ‚úÖ          | Max/Min in window of size `k`          |
| HashMap-based        | ‚úÖ            | ‚ùå          | Unique/repeated/at most `k` problems   |
| Two Pointers Dynamic | ‚úÖ Sometimes  | ‚ùå          | Subarrays/strings with condition       |

---

Want to include a categorized list of top 20 problems next?

