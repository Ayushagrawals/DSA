/*Given an array A of length N, Find the maximum subarray sum out of all possible subarray of length B.*/
//here we are trying to do fixed sliding window and checking if i==B-1 because at that window is of B-1 size at atht time we will calculate max sum
//and then after we will try remove previous and next sum
public class Solution {
    public long solve(int[] A, int B) {
        long maxsum=0;
        long sum=0;
        for(int i=0;i<A.length;i++)
        {
            if(i-B>=0)
            {
                sum=(long)sum+A[i]-A[i-B];
                maxsum=Math.max(maxsum,sum);
            }
            else{
                 sum+=A[i];
                 if(i == B - 1) {
                    maxsum = sum; 
                }
            }
        }
        return maxsum;
    }
}
