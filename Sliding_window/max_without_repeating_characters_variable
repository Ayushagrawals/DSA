//This should not be done with map frequency because it's harder to do in that case how many times you will move window and keep track
//will be hard hence using index is right way to remove old index.
//this question is unique because we ned to store the alst inex as we want the non reopating chaaracter so we will moce foarawrd also we want to make
//sure to update start it should be max(start,lastindex) because lastindex could go bakward if last occourence of element was at backward. this way
//window is alway unique this is important qusiton and also we will calculate the maxlength either it's added or not added with hashmap
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer> m=new HashMap<Character,Integer>();
        int maxlength=0;
        int start=0;
        for(int i=0;i<s.length();i++)
        {
            if(!m.containsKey(s.charAt(i)))
            {
                m.put(s.charAt(i),i);
                
            }
            else{
                start = Math.max(start, m.get(s.charAt(i))+1);
                m.put(s.charAt(i), i);
            }
            maxlength=Math.max(i-start+1,maxlength);
        }
        return maxlength;
    }
}
//Applications
/*Ahh got it now! üî•  
You're asking:  
> ‚ÄúBased on the same principle of 'longest substring without repeating characters', just like how **Fruit Into Baskets** was a real-world twist on 'at most K distinct', can we create a **new real-world problem** that applies this **'all unique'** sliding window principle?‚Äù

**Absolutely yes!** Here's a few **realistic interview-style** questions built on the **"all characters unique"** sliding window pattern üëá

---

### ‚úÖ Custom Problem 1:  
**Problem Name**: `Longest Unique Customer Activity`

**Description**:  
You are given an array `activities` where each element represents the customer ID performing an activity on a website.  
Return the **length of the longest subarray** in which **no customer repeated** ‚Äî i.e., all customer IDs are **unique**.

**Example**:
```java
Input: activities = [1, 2, 3, 1, 2, 3, 4, 5]
Output: 5
Explanation: Longest subarray without repeating IDs is [1, 2, 3, 4, 5]
```

üëâ **This is the same as Longest Substring Without Repeating Characters**, just using integers.

---

### ‚úÖ Custom Problem 2:  
**Problem Name**: `Longest Unique Song Playlist`

**Description**:  
You‚Äôre given a list of song IDs representing songs played by a user.  
Find the length of the **longest stretch of time** where the user didn‚Äôt repeat any song.

**Example**:
```java
Input: songs = [10, 20, 30, 10, 40, 50]
Output: 4
Explanation: [20, 30, 10, 40] has all unique songs
```

---

### ‚úÖ Custom Problem 3:  
**Problem Name**: `Max Unique Product Streak`

**Description**:  
You're given an array of product IDs purchased by a user over days.  
Find the **maximum number of days in a row** the user didn‚Äôt purchase the same product again.

**Input**: `[5, 3, 4, 5, 6, 7]`  
**Output**: `4`  
**Explanation**: `[3, 4, 5, 6]`

---

### ‚úÖ Custom Problem 4:  
**Problem Name**: `Longest Period of No Duplicate Logins`

**Description**:  
You have a list of usernames representing login events.  
Find the longest time period (substring) during which **no user logged in more than once**.

---

Each of these problems is:
- A real-world scenario
- Uses the same core logic of **‚Äúlongest substring with all unique elements‚Äù**
- Ideal for **variable-size sliding window**

---

Want me to turn any of these into an actual Leetcode-style question with constraints, input-output format, and starter code?*/
